cmake_minimum_required(VERSION 2.8)
project(hpcse)

option(HPCSE_OPENMP "Accelerate using OpenMP where available." ON)
option(HPCSE_MPI "Accelerate using MPI where available." ON)

find_package(Threads REQUIRED)
if (HPCSE_OPENMP)
  find_package(OpenMP)
endif()
if (HPCSE_MPI)
  find_package(MPI)
endif()
if (OpenMP_FOUND OR OPENMP_FOUND)
  message(STATUS "Building HPCSE code WITH OpenMP support.")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}") 
  set(HPCSE_OPENMP_FOUND ON)
else()
  message(STATUS "Building HPCSE code WITHOUT OpenMP support.")
  set(HPCSE_OPENP_FOUND OFF)
endif()
if (MPI_CXX_FOUND)
  message(STATUS "Building WITH MPI support.")
  set(CMAKE_CXX_COMPILE_FLAGS "${CMAKE_CXX_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS}")
  set(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS}")
  include_directories(SYSTEM ${MPI_INCLUDE_PATH})
  set(HPCSE_LIBS ${HPCSE_LIBS} ${MPI_CXX_LIBRARIES})
  set(HPCSE_MPI_FOUND ON)
else()
  message(STATUS "Building WITHOUT MPI support.")
  set(HPCSE_MPI_FOUND OFF)
endif()
set(HPCSE_LIBS ${HPCSE_LIBS} ${CMAKE_THREAD_LIBS_INIT})
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -O3 -Wall -Wextra -Weffc++")

add_subdirectory(riemann)
add_subdirectory(diffusion)
add_subdirectory(metropolis)

include_directories(common/include)
include_directories(riemann/include)
include_directories(diffusion/include)
include_directories(metropolis/include)

add_subdirectory(exercise1)
add_subdirectory(exercise2)
add_subdirectory(exercise3)
add_subdirectory(exercise4)
add_subdirectory(exercise5)
add_subdirectory(exercise6)
add_subdirectory(exercise7)
